/* *****************************************************************************
 *  Name:
 *  Date:
 *  Description:
 **************************************************************************** */

import edu.princeton.cs.algs4.Point2D;
import edu.princeton.cs.algs4.Queue;
import edu.princeton.cs.algs4.RectHV;

import java.util.TreeSet;

// Write a mutable data type PointSET.java that represents a set of points in the unit square.
// Implement the following API by using a red–black BST:
// treeSet底层就是用红黑树实现的，所以也不用额外写啥。不过用不用重载一下排序？嗯，point2D本身就compareble，不用把（那好简单啊）

public class PointSET {

    private TreeSet<Point2D> pointset;

    public PointSET()                               // construct an empty set of points
    {
        pointset = new TreeSet<Point2D>();
    }

    public boolean isEmpty()                      // is the set empty?
    {
        return pointset.isEmpty();
    }

    public int size()                         // number of points in the set
    {
        return pointset.size();
    }

    // Your implementation should support insert() and contains() in time proportional to the logarithm of the number of points
    // in the set in the worst case;

    public void insert(
            Point2D p)              // add the point to the set (if it is not already in the set)
    // set 集合本来就不允许插入重复的
    {
        // Throw a java.lang.IllegalArgumentException if any argument is null.
        if (p == null)
            throw new IllegalArgumentException();
        if (!contains(p))
            pointset.add(p);
    }

    public boolean contains(Point2D p)            // does the set contain point p?
    {
        return pointset.contains(p);
    }

    public void draw()                         // draw all points to standard draw
    {
        for (Point2D p : pointset)
            p.draw();
    }

    // support nearest() and range() in time proportional to the number of points in the set.

    public Iterable<Point2D> range(
            RectHV rect)             // all points that are inside the rectangle (or on the boundary)
    {
        Queue<Point2D> pointInside = new Queue<Point2D>();
        for (Point2D p : pointset)
            if (rect.contains(p))
                pointInside.enqueue(p);
        return pointInside;
    }

    public Point2D nearest(
            Point2D p)             // a nearest neighbor in the set to point p; null if the set is empty
    {
        if (isEmpty()) return null;
        Point2D minPoint = pointset.first();
        double minDistance = p.distanceSquaredTo(minPoint);

        for (Point2D q : pointset)
            if (p.distanceSquaredTo(q) < minDistance) {
                minPoint = q;
                minDistance = p.distanceSquaredTo(minPoint);
            }
        return minPoint;
    }

    public static void main(
            String[] args)                  // unit testing of the methods (optional)
    {

    }
}
