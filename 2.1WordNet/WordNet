/* *****************************************************************************
 *  Name:
 *  Date:
 *  Description:我太相信使用程序的人的脑洞了……怎么老不记得检测合法性呢
 **************************************************************************** */

import edu.princeton.cs.algs4.BreadthFirstDirectedPaths;
import edu.princeton.cs.algs4.Digraph;
import edu.princeton.cs.algs4.In;
import edu.princeton.cs.algs4.Topological;

import java.util.ArrayList;
import java.util.HashSet;

public class WordNet {
    private ArrayList<String[]> synArray;
    private Digraph hypDigraph;

    // constructor takes the name of the two input files
    public WordNet(String synsets, String hypernyms) {

        if (synsets == null || hypernyms == null) throw new IllegalArgumentException();

        In in1 = new In(synsets);
        String synLine = in1.readLine();
        // read synset

        synArray = new ArrayList<String[]>();
        String aux;
        while (synLine != null) {
            aux = synLine.split(",")[1];    // 同义词集合，每个noun用空格隔开
            synArray.add(aux.split(" "));       // synArray的每一个元素都是某行所有同义词的String数组（可以指向不同大小的数组呀？）
            synLine = in1.readLine();     // 如果到底了，是会被赋值null的吧……？

        }
        // Use the readLine() method in our In library to read in the data one line at a time. Use the split() method in Java's String library to divide a line into fields. You can find an example using split() in Domain.java. Use Integer.parseInt() to convert string id numbers into integers.
        // Do I need to store the glosses? No, you won't use them on this assignment.

        // 感觉不能直接用文件作参数调用digraph的构造函数=-=，输入文件格式跟那个不同啊。

        hypDigraph = new Digraph(synArray.size());
        In in2 = new In(hypernyms);
        String hypLine = in2.readLine();
        int ver;        // 每一行的第一个数
        while (hypLine != null) {
            ver = Integer.parseInt(hypLine.split(",")[0]);
            for (String s : hypLine.split(","))
                hypDigraph.addEdge(ver, Integer.parseInt(s));
            hypLine = in2.readLine();
        }

       
    }
    
    // 话说这个真的要判断吗。写上反而会报错唉。它给的测试文件就不是rootedDAG吧……
    private void isRootedDAG() {
        // 思路来源：https://www.coursera.org/learn/algorithms-part2/discussions/weeks/1/threads/zTY0b-amEeaVHA6A58f75A

        Topological top = new Topological(hypDigraph);
        if (!top.hasOrder()) throw new IllegalArgumentException();
       
        int outZeroNumber = 0;
        int root = -1;
        for (int i = 0; i < synArray.size(); i++) {
            if (hypDigraph.outdegree(i) == 0) {
                outZeroNumber++;
                root = i;
            }
            if (outZeroNumber > 1) throw new IllegalArgumentException();
        }
        if (outZeroNumber == 0) throw new IllegalArgumentException();
        BreadthFirstDirectedPaths bfd = new BreadthFirstDirectedPaths(hypDigraph.reverse(), root);
        for (int i = 0; i < synArray.size(); i++)
            if (!bfd.hasPathTo(i)) throw new IllegalArgumentException();

    }

    // returns all WordNet nouns
    public Iterable<String> nouns() {
        // Queue<String> nouns = new Queue<String>();

        // 这个，不会还要去掉重复吧……那用SET吧。应该也不需要顺序，那就hashSet了

        HashSet<String> nouns = new HashSet<String>();
        for (String[] line : synArray) {
            for (String s : line)
                nouns.add(s);
            // 查了一下，这个 Manual array to collection copy 的报错可以用以下语句替换for循环来修正。
            // nouns.addAll(Arrays.asList(line));
            // 我还是选择容易理解的for loop吧：）
        }
        return nouns;
    }

    // is the word a WordNet noun?
    public boolean isNoun(String word) {
        if (word == null) throw new IllegalArgumentException();
        for (String s : nouns())
            if (s.equals(word)) return true;

        return false;
    }

    // distance between nounA and nounB (defined below)
    public int distance(String nounA, String nounB) {
        if (nounA == null || nounB == null) throw new IllegalArgumentException();
        if (!isNoun(nounA) || !isNoun(nounB)) throw new IllegalArgumentException();
        SAP sap = new SAP(hypDigraph);
        return sap.length(findSynset(nounA), findSynset(nounB));
    }

    private ArrayList<Integer> findSynset(String noun) {
        ArrayList<Integer> synNumber = new ArrayList<Integer>();        // 一个noun可能出现在多行，所以返回了一个集合
        for (String[] line : synArray)
            for (String s : line)
                if (s.equals(noun)) synNumber.add(synArray.indexOf(line));
        return synNumber;
    }

    // a synset (second field of synsets.txt) that is the common ancestor of nounA and nounB
    // in a shortest ancestral path (defined below)
    public String sap(String nounA, String nounB) {
        if (nounA == null || nounB == null) throw new IllegalArgumentException();
        if (!isNoun(nounA) || !isNoun(nounB)) throw new IllegalArgumentException();

        SAP sap = new SAP(hypDigraph);
        int synNumber = sap
                .ancestor(findSynset(nounA), findSynset(nounB));     // 目标synset在数组中的索引，即行号

        StringBuilder ancestor = new StringBuilder();
        for (String s : synArray.get(synNumber))
            ancestor.append(s + " ");
        // ancestor = ancestor + " " + s;
        // Builds a 'String' object using the '+' operator in a loop, which can take time quadratic in the length of the resulting string.
        // Instead, use 'StringBuilder'.

        return ancestor.toString();
    }


    // do unit testing of this class
    public static void main(String[] args) {

    }
}
