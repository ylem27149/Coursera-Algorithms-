/* *****************************************************************************
 *  Name:
 *  Date:
 *  Description:
 **************************************************************************** */

import edu.princeton.cs.algs4.Digraph;

public class SAP {

    private final Digraph digraph;

    // constructor takes a digraph (not necessarily a DAG)
    public SAP(Digraph G) {
        digraph = new Digraph(G);

        // How can I make the data type SAP immutable? You can (and should) save the associated digraph in an instance variable.
        // However, because our Digraph data type is mutable, you must first make a defensive copy by calling the copy constructor.
        // 应该是说调用这个构造函数： public Digraph(Digraph G)
        // Initializes a new digraph that is a deep copy of the specified digraph.[[https://algs4.cs.princeton.edu/42digraph/Digraph.java.html

    }

    private void cornerTest(int i) {    // 检测参数是否属于图的顶点
        if (i < 0 || i >= digraph.V())
            throw new IllegalArgumentException();
        // 其实我不懂为啥非得自己手写报错。就让它自己 throw NullPointer或者OutOfBourdry 不行吗？

    }

    // length of shortest ancestral path between v and w; -1 if no such path
    public int length(int v, int w) {
        cornerTest(v);
        cornerTest(w);
        DeluxeBFS bfsV = new DeluxeBFS(digraph, v);
        DeluxeBFS bfsW = new DeluxeBFS(digraph, w);
        // if (bfsW.hasPathTo(v)) return bfsW.distTo(v);

        //其实这两句的逻辑完全可以放到下面的循环里不用单独写嗯。

        int length = -1;

        for (int i = 0; i < digraph.V(); i++)

        // 如果用我上一版的那种借助adj的思路，倒是不用扫描全部节点，不过写起来很绕。算了
        {
            if (bfsV.hasPathTo(i) && bfsW.hasPathTo(i)) {
                if (length == -1) length = bfsV.distTo(i) + bfsW.distTo(i);
                else length = Math.min(bfsV.distTo(i) + bfsW.distTo(i), length);
            }
        }
        return length;
    }

    // a common ancestor of v and w that participates in a shortest ancestral path; -1 if no such path
    public int ancestor(int v, int w) {
        cornerTest(v);
        cornerTest(w);
        DeluxeBFS bfsV = new DeluxeBFS(digraph, v);
        DeluxeBFS bfsW = new DeluxeBFS(digraph, w);

        int length = -1;
        int ancestor = -1;

        for (int i = 0; i < digraph.V(); i++) {
            if (bfsV.hasPathTo(i) && bfsW.hasPathTo(i)) {
                if (length == -1) {
                    length = bfsV.distTo(i) + bfsW.distTo(i);
                    ancestor = i;
                }
                else if (bfsV.distTo(i) + bfsW.distTo(i) < length) {
                    length = bfsV.distTo(i) + bfsW.distTo(i);
                    ancestor = i;
                }
            }
        }
        return ancestor;
    }

    // length of shortest ancestral path between any vertex in v and any vertex in w; -1 if no such path
    public int length(Iterable<Integer> v, Iterable<Integer> w) {
        if (v == null || w == null)
            throw new IllegalArgumentException();

        for (Integer i : v) {
            if (i == null)
                throw new IllegalArgumentException();      //像这种，如果原元素是null,用int i 调用会咋样呢？NullPointer报错？
            cornerTest(i);
        }
        for (Integer i : w) {
            if (i == null) throw new IllegalArgumentException();
            cornerTest(i);
        }

        DeluxeBFS bfsV = new DeluxeBFS(digraph, v);
        DeluxeBFS bfsW = new DeluxeBFS(digraph, w);

        // To improve the method length(Iterable<Integer> v, Iterable<Integer> w)  time-taking proportional to  E + V?,
        // The key is using the constructor in BreadthFirstDirectedPaths that takes an iterable of sources instead of using a single source
        // 大概感觉了一下，应该直接copy上面的就行吧……

        int length = -1;

        for (int i = 0; i < digraph.V(); i++)

        // 如果用我上一版的那种借助adj的思路，倒是不用扫描全部节点，不过写起来很绕。算了
        {
            if (bfsV.hasPathTo(i) && bfsW.hasPathTo(i)) {
                if (length == -1) length = bfsV.distTo(i) + bfsW.distTo(i);
                else length = Math.min(bfsV.distTo(i) + bfsW.distTo(i), length);
            }
        }
        return length;
    }

    // a common ancestor that participates in shortest ancestral path; -1 if no such path
    public int ancestor(Iterable<Integer> v, Iterable<Integer> w) {

        if (v == null || w == null)
            throw new IllegalArgumentException();

        for (Integer i : v) {
            if (i == null) throw new IllegalArgumentException();
            cornerTest(i);
        }
        for (Integer i : w) {
            if (i == null) throw new IllegalArgumentException();
            cornerTest(i);
        }

        DeluxeBFS bfsV = new DeluxeBFS(digraph, v);
        DeluxeBFS bfsW = new DeluxeBFS(digraph, w);
        int length = -1;
        int ancestor = -1;

        for (int i = 0; i < digraph.V(); i++) {
            if (bfsV.hasPathTo(i) && bfsW.hasPathTo(i)) {
                if (length == -1) {
                    length = bfsV.distTo(i) + bfsW.distTo(i);
                    ancestor = i;
                }
                else if (bfsV.distTo(i) + bfsW.distTo(i) < length) {
                    length = bfsV.distTo(i) + bfsW.distTo(i);
                    ancestor = i;
                }
            }
        }
        return ancestor;
    }

    // do unit testing of this class
    public static void main(String[] args) {

    }
}
