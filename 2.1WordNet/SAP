/* *****************************************************************************
 *  Name:
 *  Date:
 *  Description:Iterable<Integer>中的Integer也需要进行Null检测
 * 尝试存储每个节点的所有上位词，会提示 Number of primitive operations in Digraph exceeds limit: 1000000000。放弃这个思路，回退到上一版
 **************************************************************************** */

import edu.princeton.cs.algs4.BreadthFirstDirectedPaths;
import edu.princeton.cs.algs4.Digraph;
import edu.princeton.cs.algs4.Queue;

import java.util.HashSet;

public class SAP {

    private final Digraph digraph;
    private HashSet<Integer>[] ancestors; // ancestors[i]是个保存了节点i所有上位词的queue。


    // constructor takes a digraph (not necessarily a DAG)
    public SAP(Digraph G) {
        digraph = new Digraph(G);

        // How can I make the data type SAP immutable? You can (and should) save the associated digraph in an instance variable.
        // However, because our Digraph data type is mutable, you must first make a defensive copy by calling the copy constructor.
        // 应该是说调用这个构造函数： public Digraph(Digraph G)
        // Initializes a new digraph that is a deep copy of the specified digraph.[[https://algs4.cs.princeton.edu/42digraph/Digraph.java.html
        ancestors = (HashSet<Integer>[]) new HashSet[G.V()];

        for (int i = 0; i < G.V(); i++)
        // 对图中的每个节点，保存它的所有上位词。adj(i)返回所有从i指出的点的迭代，而从i指出的点就是i的上位词
        {
            ancestors[i] = new HashSet<Integer>();      // 里面每个元素也要new一下，忘了。
            ancestors[i].add(i);
            upFind(i);
        }
    }

    private void upFind(int search) {
        // 循环调用会stackoverflow，借鉴https://github.com/zhichaoh/Coursera-Algorithms/blob/master/src/SAP.java 用个queue存吧。另外考虑到不能重复去存，用set吧。
        Queue<Integer> adj = new Queue<Integer>();
        int i = search;
        Iterable<Integer> adjI = digraph.adj(i);
        while (adjI != null) {
            for (int m : adjI) {
                ancestors[search].add(m);
                adj.enqueue(m);
            }
            if (adj.isEmpty()) break;
            i = adj.dequeue();
            adjI = digraph.adj(i);
        }

    }

    private void cornerTest(int i) {    // 检测参数是否属于图的顶点
        if (i < 0 || i >= digraph.V())
            throw new IllegalArgumentException();
        // 其实我不懂为啥非得自己手写报错。就让它自己 throw NullPointer或者OutOfBourdry 不行吗？

    }

    // length of shortest ancestral path between v and w; -1 if no such path
    public int length(int v, int w) {
        cornerTest(v);
        cornerTest(w);
        BreadthFirstDirectedPaths bfsV = new BreadthFirstDirectedPaths(digraph, v);
        // if (bfsV.hasPathTo(w)) return bfsV.distTo(w);
        // a vertex is considered an ancestor of itself.
        // 如果两节点直接可达，那么它们之间的距离就是最短公共距离

        BreadthFirstDirectedPaths bfsW = new BreadthFirstDirectedPaths(digraph, w);
        // if (bfsW.hasPathTo(v)) return bfsW.distTo(v);

        //其实这两句的逻辑完全可以放到下面的循环里不用单独写嗯。

        int length = -1;

        for (int i : ancestors[v]) {
            if (bfsW.hasPathTo(i)) {
                if (length == -1) length = bfsV.distTo(i) + bfsW.distTo(i);
                else length = Math.min(bfsV.distTo(i) + bfsW.distTo(i), length);
            }
        }
        return length;
    }

    // a common ancestor of v and w that participates in a shortest ancestral path; -1 if no such path
    public int ancestor(int v, int w) {
        cornerTest(v);
        cornerTest(w);
        BreadthFirstDirectedPaths bfsV = new BreadthFirstDirectedPaths(digraph, v);
        BreadthFirstDirectedPaths bfsW = new BreadthFirstDirectedPaths(digraph, w);

        int length = -1;
        int ancestor = -1;

        for (int i : ancestors[v]) {
            if (bfsW.hasPathTo(i)) {
                if (length == -1) {
                    length = bfsV.distTo(i) + bfsW.distTo(i);
                    ancestor = i;
                }
                else if (bfsV.distTo(i) + bfsW.distTo(i) < length) {
                    length = bfsV.distTo(i) + bfsW.distTo(i);
                    ancestor = i;
                }
            }
        }
        return ancestor;
    }

    // length of shortest ancestral path between any vertex in v and any vertex in w; -1 if no such path
    public int length(Iterable<Integer> v, Iterable<Integer> w) {
        if (v == null || w == null)
            throw new IllegalArgumentException();

        for (Integer i : v) {
            if (i == null)
                throw new IllegalArgumentException();      //像这种，如果原元素是null,用int i 调用会咋样呢？NullPointer报错？
            cornerTest(i);
        }
        for (Integer i : w) {
            if (i == null) throw new IllegalArgumentException();
            cornerTest(i);
        }

        BreadthFirstDirectedPaths bfsV = new BreadthFirstDirectedPaths(digraph, v);
        BreadthFirstDirectedPaths bfsW = new BreadthFirstDirectedPaths(digraph, w);

        // To improve the method length(Iterable<Integer> v, Iterable<Integer> w)  time-taking proportional to  E + V?,
        // The key is using the constructor in BreadthFirstDirectedPaths that takes an iterable of sources instead of using a single source

        HashSet<Integer> adjV = new HashSet<Integer>();
        for (int i : v)
            adjV.addAll(ancestors[i]);

        HashSet<Integer> adjW = new HashSet<Integer>();
        for (int i : w)
            adjW.addAll(ancestors[i]);

        int length = -1;

        for (int i : adjV) {
            if (adjW.contains(i)) {
                if (length == -1) length = bfsV.distTo(i) + bfsW.distTo(i);
                else length = Math.min(bfsV.distTo(i) + bfsW.distTo(i), length);
            }
        }
        return length;
    }

    // a common ancestor that participates in shortest ancestral path; -1 if no such path
    public int ancestor(Iterable<Integer> v, Iterable<Integer> w) {

        if (v == null || w == null)
            throw new IllegalArgumentException();

        for (Integer i : v) {
            if (i == null) throw new IllegalArgumentException();
            cornerTest(i);
        }
        for (Integer i : w) {
            if (i == null) throw new IllegalArgumentException();
            cornerTest(i);
        }

        BreadthFirstDirectedPaths bfsV = new BreadthFirstDirectedPaths(digraph, v);
        BreadthFirstDirectedPaths bfsW = new BreadthFirstDirectedPaths(digraph, w);

        HashSet<Integer> adjV = new HashSet<Integer>();
        for (int i : v)
            adjV.addAll(ancestors[i]);

        HashSet<Integer> adjW = new HashSet<Integer>();     // 如果空间不够可以把这个省掉，然后用distTo判断
        for (int i : w)
            adjW.addAll(ancestors[i]);

        int length = -1;
        int ancestor = -1;


        for (int i : adjV) {
            if (adjW.contains(i)) {
                if (length == -1) {
                    length = bfsV.distTo(i) + bfsW.distTo(i);
                    ancestor = i;
                }
                else if (bfsV.distTo(i) + bfsW.distTo(i) < length) {
                    length = bfsV.distTo(i) + bfsW.distTo(i);
                    ancestor = i;
                }
            }
        }
        return ancestor;
    }

    // do unit testing of this class
    public static void main(String[] args) {

    }
}
