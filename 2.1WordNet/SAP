/* *****************************************************************************
 *  Name:
 *  Date:
 *  Description:尝试了一下把共同部分的代码写在一个函数里，反而通不过Iterable<Integer> v相关的测试了，摸不着头脑。再次回退吧……
 **************************************************************************** */

import edu.princeton.cs.algs4.BreadthFirstDirectedPaths;
import edu.princeton.cs.algs4.Digraph;
import edu.princeton.cs.algs4.In;
import edu.princeton.cs.algs4.StdOut;

public class SAP {

    private final Digraph digraph;

    // constructor takes a digraph (not necessarily a DAG)
    public SAP(Digraph G) {
        digraph = new Digraph(G);

        // How can I make the data type SAP immutable? You can (and should) save the associated digraph in an instance variable.
        // However, because our Digraph data type is mutable, you must first make a defensive copy by calling the copy constructor.
        // 应该是说调用这个构造函数： public Digraph(Digraph G)
        // Initializes a new digraph that is a deep copy of the specified digraph.[[https://algs4.cs.princeton.edu/42digraph/Digraph.java.html

    }

    private void cornerTest(int i) {    // 检测参数是否属于图的顶点
        if (i < 0 || i >= digraph.V())
            throw new IllegalArgumentException();
        // 其实我不懂为啥非得自己手写报错。就让它自己 throw NullPointer或者OutOfBourdry 不行吗？

    }

    // length of shortest ancestral path between v and w; -1 if no such path
    public int length(int v, int w) {
        cornerTest(v);
        cornerTest(w);

        BreadthFirstDirectedPaths bfsV = new BreadthFirstDirectedPaths(digraph, v);
        BreadthFirstDirectedPaths bfsW = new BreadthFirstDirectedPaths(digraph, w);

        return shortest(bfsV, bfsW)[0];
    }

    // a common ancestor of v and w that participates in a shortest ancestral path; -1 if no such path
    public int ancestor(int v, int w) {
        cornerTest(v);
        cornerTest(w);
        BreadthFirstDirectedPaths bfsV = new BreadthFirstDirectedPaths(digraph, v);
        BreadthFirstDirectedPaths bfsW = new BreadthFirstDirectedPaths(digraph, w);

        return shortest(bfsV, bfsW)[1];
    }

    private int[] shortest(BreadthFirstDirectedPaths bfsV, BreadthFirstDirectedPaths bfsW)

    // 计算公共祖先和最短距离的复用代码
    {

        int[] shortest = { -1, -1 };       // 第一个元素存储最短距离，第二个元素存储公共祖先


        for (int i = 0; i < digraph.V(); i++) {
            if (bfsV.hasPathTo(i) && bfsW.hasPathTo(i)) {
                if (shortest[0] == -1) {
                    shortest[0] = bfsV.distTo(i) + bfsW.distTo(i);
                    shortest[1] = i;
                }
                else if (bfsV.distTo(i) + bfsW.distTo(i) < shortest[0]) {
                    shortest[0] = bfsV.distTo(i) + bfsW.distTo(i);
                    shortest[1] = i;
                }
            }
        }

        return shortest;

    }

    // length of shortest ancestral path between any vertex in v and any vertex in w; -1 if no such path
    public int length(Iterable<Integer> v, Iterable<Integer> w) {
        if (v == null || w == null)
            throw new IllegalArgumentException();

        for (Integer i : v) {
            if (i == null)
                throw new IllegalArgumentException();      //像这种，如果原元素是null,用int i 调用会咋样呢？NullPointer报错？
            cornerTest(i);
        }
        for (Integer i : w) {
            if (i == null) throw new IllegalArgumentException();
            cornerTest(i);
        }

        BreadthFirstDirectedPaths bfsV = new BreadthFirstDirectedPaths(digraph, v);
        BreadthFirstDirectedPaths bfsW = new BreadthFirstDirectedPaths(digraph, w);

        return shortest(bfsV, bfsW)[1];
    }

    // a common ancestor that participates in shortest ancestral path; -1 if no such path
    public int ancestor(Iterable<Integer> v, Iterable<Integer> w) {

        if (v == null || w == null)
            throw new IllegalArgumentException();

        for (Integer i : v) {
            if (i == null) throw new IllegalArgumentException();
            cornerTest(i);
        }
        for (Integer i : w) {
            if (i == null) throw new IllegalArgumentException();
            cornerTest(i);
        }

        BreadthFirstDirectedPaths bfsV = new BreadthFirstDirectedPaths(digraph, v);
        BreadthFirstDirectedPaths bfsW = new BreadthFirstDirectedPaths(digraph, w);

        return shortest(bfsV, bfsW)[0];
    }

    // do unit testing of this class
    public static void main(String[] args) {
        
}
