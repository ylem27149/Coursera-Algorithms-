/******************************************************************************
 *  Name:
 *  Date: 2019.4.28
 * Description:
 *
 ******************************************************************************/

import edu.princeton.cs.algs4.StdDraw;
import edu.princeton.cs.algs4.StdIn;
import edu.princeton.cs.algs4.StdOut;

import java.util.ArrayList;
import java.util.Comparator;

public class Point implements Comparable<Point> {

    private final int x;     // x-coordinate of this point
    private final int y;     // y-coordinate of this point

    /**
     * Initializes a new point.
     *
     * @param x the <em>x</em>-coordinate of the point
     * @param y the <em>y</em>-coordinate of the point
     */
    public Point(int x, int y) {
        /* DO NOT MODIFY */


        this.x = x;
        this.y = y;

        // To avoid potential complications with integer overflow or floating-point precision,
        // you may assume that the constructor arguments x and y are each between 0 and 32,767.
    }


    /**
     * Draws this point to standard draw.
     */
    public void draw() {
        /* DO NOT MODIFY */
        StdDraw.point(x, y);
    }

    /**
     * Draws the line segment between this point and the specified point to standard draw.
     *
     * @param that the other point
     */
    public void drawTo(Point that) {
        /* DO NOT MODIFY */
        StdDraw.line(this.x, this.y, that.x, that.y);
    }

    /**
     * Returns the slope between this point and the specified point. Formally, if the two points are
     * (x0, y0) and (x1, y1), then the slope is (y1 - y0) / (x1 - x0). For completeness, the slope
     * is defined to be +0.0 if the line segment connecting the two points is horizontal;
     * Double.POSITIVE_INFINITY if the line segment is vertical; and Double.NEGATIVE_INFINITY if
     * (x0, y0) and (x1, y1) are equal.
     *
     * @param that the other point
     * @return the slope between this point and the specified point
     */
    public double slopeTo(Point that) {
        if (this.y == that.y && this.x != that.x) return +0.0;
        if (this.x == that.x && this.y != that.y) return Double.POSITIVE_INFINITY;
        if (this.y == that.y && this.x == that.x) return Double.NEGATIVE_INFINITY;
        return (this.y - that.y) / (double) (this.x - that.x);
    }

    /**
     * Compares two points by y-coordinate, breaking ties by x-coordinate. Formally, the invoking
     * point (x0, y0) is less than the argument point (x1, y1) if and only if either y0 < y1 or if
     * y0 = y1 and x0 < x1.
     *
     * @param that the other point
     * @return the value <tt>0</tt> if this point is equal to the argument point (x0 = x1 and y0 =
     * y1); a negative integer if this point is less than the argument point; and a positive integer
     * if this point is greater than the argument point
     */
    public int compareTo(Point that) {
        if (y == that.y && x == that.x) return 0;
        if (y < that.y || (y == that.y && x < that.x))
            return -1;
        else return 1;
    }

    /**
     * Compares two points by the slope they make with this point. The slope is defined as in the
     * slopeTo() method.
     *
     * @return the Comparator that defines this ordering on points
     */
    public Comparator<Point> slopeOrder() {
        return new SlopeOrder();
    }

    private class SlopeOrder implements Comparator<Point> {
        public int compare(Point a, Point b) {
            double slope1 = slopeTo(a);
            double slope2 = slopeTo(b);
            if (slope1 > slope2) return 1;
            if (slope1 == slope2) return 0;
            else return -1;

        }
    }

    /**
     * Returns a string representation of this point. This method is provide for debugging; your
     * program should not rely on the format of the string representation.
     *
     * @return a string representation of this point
     */
    public String toString() {
        /* DO NOT MODIFY */
        return "(" + x + ", " + y + ")";
    }

    /**
     * Unit tests the Point data type.
     */
    public static void main(String[] args) {
        Point a = new Point(StdIn.readInt(), StdIn.readInt());
        Point b = new Point(StdIn.readInt(), StdIn.readInt());
        StdOut.println("the slope between a and a is " + a.slopeTo(a));
        StdOut.println("the slope between a and b is " + a.slopeTo(b));
        Point c = new Point(StdIn.readInt(), StdIn.readInt());
        Point d = new Point(StdIn.readInt(), StdIn.readInt());
        StdOut.println("the slope between a and c is " + a.slopeTo(c));
        StdOut.println("the slope between a and d is " + a.slopeTo(d));
        ArrayList<Point> points = new ArrayList<Point>();
        points.add(a);
        points.add(b);
        points.add(c);
        points.add(d);
        points.sort(a.slopeOrder());
        StdOut.println(points);

    }
}
