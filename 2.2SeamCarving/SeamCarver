/* *****************************************************************************
 *  Name:
 *  Date:
 *  Description: 重写了relax部分的逻辑，把从上往下改成从下往上。参考http://www.shicheng0829.cn/index.php/2018/11/28/%E3%80%90algorithms-part-ii%E3%80%91week2-seam-carving/
 **************************************************************************** */

import edu.princeton.cs.algs4.Picture;
import edu.princeton.cs.algs4.StdOut;

import java.awt.Color;

public class SeamCarver {
    private int[][] picRGB;
    //   private double[][] energy;

    // create a seam carver object based on the given picture
    public SeamCarver(Picture picture) {

        if (picture == null) throw new IllegalArgumentException();

        picRGB = new int[picture.height()][picture.width()];

        for (int col = 0; col < width(); col++)
            for (int row = 0; row < height(); row++)
                picRGB[row][col] = picture.getRGB(col, row);


    }

    // current picture
    public Picture picture() {
        Picture picture = new Picture(width(), height());
        for (int col = 0; col < width(); col++)
            for (int row = 0; row < height(); row++)
                picture.setRGB(col, row, picRGB[row][col]);

        return picture;
    }

    // A data type should not have side effects (unless they are specified in the API).
    // It should behave properly as prescribed even if the client mutates the Picture object passed to the constructor or returned from the picture() method.
    // As a result, you might need to make defensive copies of any Picture objects that you either take as input or return as output.

    // width of current picture
    public int width() {
        return picRGB[0].length;
    }

    // height of current picture
    public int height() {
        return picRGB.length;
    }

    // energy of pixel at column x and row y
    public double energy(int x, int y) {

        if (x < 0 || x >= width() || y < 0 || y >= height()) throw new IllegalArgumentException();

        if (x == 0 || x == width() - 1 || y == 0 || y == height() - 1) return 1000;
        //边界上的点， return 1000;

        Color xColor1 = new Color(picRGB[y][x - 1]);       // picture.get(x - 1, y);
        Color xColor2 = new Color(picRGB[y][x + 1]);       // picture.get(x + 1, y);
        double xGradient = Math.pow(xColor1.getRed() - xColor2.getRed(), 2) + Math
                .pow(xColor1.getGreen() - xColor2.getGreen(), 2) + Math
                .pow(xColor1.getBlue() - xColor2.getBlue(),
                     2);

        // 乘方 Math.pow(a,b), a 的 b次方。虽然我知道右边其实是个int, 但是pow返回的就是double,所以左边只能用double了

        Color yColor1 = new Color(picRGB[y - 1][x]); // picture.get(x, y - 1);
        Color yColor2 = new Color(picRGB[y + 1][x]); // picture.get(x, y + 1);
        double yGradient = Math.pow(yColor1.getRed() - yColor2.getRed(), 2) + Math
                .pow(yColor1.getGreen() - yColor2.getGreen(), 2) + Math
                .pow(yColor1.getBlue() - yColor2.getBlue(), 2);

        return Math.sqrt(xGradient + yGradient);

    }

    // sequence of indices for horizontal seam
    public int[] findHorizontalSeam() {
        transpose();
        int[] minPath = findVerticalSeam();
        transpose();
        return minPath;

    }
    // The order in which you traverse the pixels (row-major order vs. column-major order) can make a big difference.
    // 意思应该是，先写Vertical, Horizontal 是反转后调用Vertical吧？

    private void transpose() {

        int[][] tranPic = new int[width()][height()];

        for (int col = 0; col < width(); col++)
            for (int row = 0; row < height(); row++)
                tranPic[col][row] = picRGB[row][col];


        // double[][] ene = new double[width()][height()];

        //      for (int col = 0; col < width(); col++)
        //            for (int row = 0; row < height(); row++)
        //             ene[col][row] = energy[row][col];

        //     energy = ene;
        picRGB = tranPic;

    }

    // sequence of indices for vertical seam
    public int[] findVerticalSeam() {

        // We want to find the shortest path from any of the W pixels in the top row to any of the W pixels in the bottom row.
        int[] shortestPath = new int[height()]; // 存储最短路径的x坐标

        double minEnergy = Double.POSITIVE_INFINITY;

        double[][] energy = new double[height()][width()];

        for (int col = 0; col < width(); col++)
            for (int row = 0; row < height(); row++)
                energy[row][col] = energy(col, row);

        // distTo 初始化

        double[][] distTo = new double[height()][width()];

        for (int col = 0; col < width(); col++)
            for (int row = 0; row < height(); row++) {
                if (row == 0) distTo[row][col] = 1000;
                else distTo[row][col] = Double.POSITIVE_INFINITY;
            }


        // Double.POSITIVE_INFINITY
        // MIN_VALUE


        int[][] edgeTo = new int[height()][width()];

        for (int row = 1; row < height(); row++)
            for (int col = 0; col < width(); col++)
                relax(row, col, distTo, edgeTo, energy[row][col]);


        int bottomMin = -1;      // 最后一行中，distTo最小的点的x坐标
        for (int i = 0; i < width(); i++)
            if (distTo[height() - 1][i] < minEnergy) {
                bottomMin = i;
                minEnergy = distTo[height() - 1][i];
            }
        // 如果minEnergy被更新了，就更新shorestPath。
        if (bottomMin != -1) {
            int minX = bottomMin;
            for (int i = 0; i < height(); i++) {
                shortestPath[height() - 1 - i] = minX;
                minX = edgeTo[height() - 1 - i][minX];
            }
        }


        return shortestPath;

    }

    private void relax(int row, int col, double[][] distTo,
                       int[][] edgeTo, double energy) {

        // 对点（row,col),查找上方能够到达它的三个节点，找到到该节点的最短距离
        for (int i = -1; i < 2; i++)
            if (col + i >= 0 && col + i < width()
                    && distTo[row][col] > distTo[row - 1][col + i] + energy) {
                distTo[row][col] = distTo[row - 1][col + i] + energy;
                edgeTo[row][col] = col + i;
            }

    }


    private void seamTest(int[] seam, int length, int range) {
        if (seam == null) throw new IllegalArgumentException();
        if (seam.length != length) throw new IllegalArgumentException();

        for (int i = 0; i < seam.length - 1; i++) {
            if (seam[i] < 0 || seam[i] > range - 1)
                throw new IllegalArgumentException();
            if (Math.abs(seam[i] - seam[i + 1]) > 1) throw new IllegalArgumentException();
        }
        if (seam[length - 1] < 0 || seam[length - 1] > range - 1)
            throw new IllegalArgumentException();

    }

    // remove horizontal seam from current picture
    public void removeHorizontalSeam(int[] seam) {
        transpose();
        removeVerticalSeam(seam);
        transpose();

    }

    // remove vertical seam from current picture
    public void removeVerticalSeam(int[] seam) {

        seamTest(seam, height(), width());
        if (width() <= 1) throw new IllegalArgumentException();

        int[][] pic = new int[height()][width() - 1];
        //       double[][] ene = new double[height()][width() - 1];

        for (int row = 0; row < height(); row++) {
            System.arraycopy(picRGB[row], 0, pic[row], 0, seam[row]);
            System.arraycopy(picRGB[row], seam[row] + 1, pic[row], seam[row],
                             width() - seam[row] - 1);
            //      System.arraycopy(energy[row], 0, ene[row], 0, seam[row]);
            //        System.arraycopy(energy[row], 0, ene[row], 0, width() - seam[row] - 1);
        }

        picRGB = pic;

        //        for (int row = 0; row < height(); row++)
        //           for (int col = 0; col < width(); col++) {

        //          if (seam[row] - col <= 1)
        //                ene[row][col] = energy(col,row);       // 因为要调用energy()，所以需要在上面先改掉实例变量。然后width()也改变了

        //         }

        //     energy = ene;


    }


    public static void main(String[] args) {

        Picture picture = new Picture("7x3.png");
        SeamCarver seamCarver = new SeamCarver(picture);
        int[] solution = seamCarver.findVerticalSeam();
        for (int i : solution)
            StdOut.print(i + ", ");
        seamCarver.removeVerticalSeam(solution);
        int[] hor = seamCarver.findHorizontalSeam();
        seamCarver.removeHorizontalSeam(hor);
    }
}
