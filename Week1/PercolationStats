/* *****************************************************************************
 *  Name:
 *  Date:
 *  Description:修改uniform参数，给threshold计算式的分母加上（）。
 *  （我说这都什么弱智错误=。=
 **************************************************************************** */

import edu.princeton.cs.algs4.StdIn;
import edu.princeton.cs.algs4.StdOut;
import edu.princeton.cs.algs4.StdRandom;
import edu.princeton.cs.algs4.StdStats;

public class PercolationStats {
    private final int t;       //
    private final double mean;
    private final double stddev;


    public PercolationStats(int n, int trials)
    // perform trials independent experiments on an n-by-n grid
    {
        if (n <= 0) {
            throw new IllegalArgumentException("n should be larger than 0.");
        }
        if (trials <= 0) {
            throw new IllegalArgumentException("trials should be larger than 0.");
        }

        t = trials;
        double[] threshold = new double[t];
        //  the threshold for t independent experiments on n-by-n grid.

        for (int i = 0; i < t; i++) {
            Percolation per = new Percolation(n);
            while (!per.percolates()) {
                int row = StdRandom
                        .uniform(1, n + 1);        // uniform是前闭后开
                int col = StdRandom.uniform(1, n + 1);
                while (per.isOpen(row, col)) {
                    row = StdRandom.uniform(1, n + 1);
                    col = StdRandom.uniform(1, n + 1);
                }
                per.open(row, col);
            }
            threshold[i] = per.numberOfOpenSites() / (double) (n
                    * n);
            // 分母要加括号
        }
        mean = StdStats.mean(threshold);
        stddev = StdStats.stddev(threshold);

    }

    public double mean()                          // sample mean of percolation threshold
    {
        return mean;
    }

    public double stddev()                        // sample standard deviation of percolation threshold
    {
        return stddev;
    }

    public double confidenceLo()                  // low  endpoint of 95% confidence interval
    {
        return (mean() - 1.96 * stddev() / Math.sqrt(t));
     
    }

    public double confidenceHi()                  // high endpoint of 95% confidence interval
    {
        return (mean() + 1.96 * stddev() / Math.sqrt(t));
    }

    public static void main(String[] args)        // test client (described below)
    {
        int n = StdIn.readInt();
        int t = StdIn.readInt();
        PercolationStats stats = new PercolationStats(n, t);
        StdOut.println("mean =" + stats.mean());
        StdOut.println("standard deviation =" + stats.stddev());
        StdOut.println(
                "95% confidence interval = [" + stats.confidenceLo() + "," + stats.confidenceHi()
                        + "]");

    }
}
