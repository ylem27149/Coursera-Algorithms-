/* *****************************************************************************
 *  name:
 *  Date:
 *  Description:添加新的WQU来检测isfull，避免回流。并且精简了一些多重if判断。
 **************************************************************************** */


// all methods should take constant time plus a constant number of calls to the union–find methods union(), find(), connected(), and count().

import edu.princeton.cs.algs4.WeightedQuickUnionUF;

public class Percolation {

    private boolean[][] percol; // n-by-n grid
    private int opensites;   // number of opensites
    private final int n;
    // row and column indices are integers between 1 and n,while the array indices are between 1~n-1
    private WeightedQuickUnionUF ufper;         // WQU for percolation()
    private WeightedQuickUnionUF uffull;
    // an extra WQU for isFull(),it has only the top virtual node to avoid backwash

    public Percolation(int number)                // create n-by-n grid, with all sites blocked
    {
        if (number <= 0) {
            throw new IllegalArgumentException("N should be larger than 0.");
        }
        n = number;
        percol
                = new boolean[n][n];     // The boolen array initialization is false ,which means all sites are blocked

        opensites = 0;
        if (n > 1) {
            // if n=1, the virtual site will make the system percolate all the time. For this case, uf and ufper are redundant.
            ufper = new WeightedQuickUnionUF(n * n + 2);
            uffull = new WeightedQuickUnionUF(n * n + 1);
            for (int i = 1; i <= n; i++) {
                ufper.union(ufindex(1, i), n * n);     // use the n*n node as the virtual top site
                uffull.union(ufindex(1, i), n * n);
            }
            for (int i = 1; i <= n; i++)

                ufper.union(ufindex(n, i),
                            n * n + 1);  // use the n*n+1 node as the virtual bottom site
        }


    }


    public void open(int row, int col)    // open site (row, col) if it is not open already
    {
        if (row <= 0 || row > n) {
            throw new IllegalArgumentException("row index " + row + " is not between 1 and " + n);
        }
        if (col <= 0 || col > n) {
            throw new IllegalArgumentException(
                    "column index " + col + " is not between 1 and " + n);
        }
        if (!isOpen(row, col)) {
            percol[row - 1][col - 1] = true;
            opensites++;
            if (row != 1 && isOpen(row - 1, col)) {
                uffull.union(ufindex(row, col), ufindex(row - 1, col));
                ufper.union(ufindex(row, col), ufindex(row - 1, col));
            }
            if (row != n && isOpen(row + 1, col)) {
                uffull.union(ufindex(row, col), ufindex(row + 1, col));
                ufper.union(ufindex(row, col), ufindex(row + 1, col));
            }
            if (col != n && isOpen(row, col + 1)) {
                uffull.union(ufindex(row, col), ufindex(row, col + 1));
                ufper.union(ufindex(row, col), ufindex(row, col + 1));
            }
            if (col != 1 && isOpen(row, col - 1)) {
                uffull.union(ufindex(row, col), ufindex(row, col - 1));
                ufper.union(ufindex(row, col), ufindex(row, col - 1));
            }
        }
    }

    private int ufindex(int row, int col) {
        return (row - 1) * n + col - 1;
    }

    public boolean isOpen(int row, int col)  // is site (row, col) open?
    {
        if (row <= 0 || row > n) {
            throw new IllegalArgumentException("row index " + row + " is not between 1 and " + n);
        }
        if (col <= 0 || col > n) {
            throw new IllegalArgumentException(
                    "column index " + col + " is not between 1 and " + n);
        }
        return (percol[row - 1][col - 1]);
    }

    public boolean isFull(int row, int col)  // is site (row, col) full?
    {
        if (row <= 0 || row > n) {
            throw new IllegalArgumentException("row index " + row + " is not between 1 and " + n);
        }
        if (col <= 0 || col > n) {
            throw new IllegalArgumentException(
                    " column index " + col + " is not between 1 and " + n);
        }
        if (n > 1)
            return isOpen(row, col) && uffull.connected(ufindex(row, col), n * n);
        else return isOpen(row, col);
    }


    public int numberOfOpenSites()       // number of open sites
    {
        return opensites;
    }

    public boolean percolates()              // does the system percolate?
    {
        if (n > 1)
            return ufper.connected(n * n, n * n + 1);
        else return isOpen(1, 1);
    }
}
