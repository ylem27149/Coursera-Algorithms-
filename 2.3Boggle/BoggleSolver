/* *****************************************************************************
 *  Name:
 *  Date:
 *  Description:searchNode中遍历邻居的写法，会导致重复使用同一个格子。
 **************************************************************************** */

import edu.princeton.cs.algs4.In;
import edu.princeton.cs.algs4.StdOut;

import java.util.Collections;
import java.util.HashSet;
import java.util.TreeSet;

public class BoggleSolver {
    private TreeSet<String> dictionary;

    // Initializes the data structure using the given array of strings as the dictionary.
    // (You can assume each word in the dictionary contains only the uppercase letters A through Z.)
    public BoggleSolver(String[] dictionary) {
        this.dictionary = new TreeSet<String>();
        // for (String s : dictionary)
        //     dic.add(s);
        Collections.addAll(this.dictionary, dictionary);

    }

    // Returns the set of all valid words in the given Boggle board, as an Iterable.
    public Iterable<String> getAllValidWords(BoggleBoard board) {
        HashSet<String> words = new HashSet<String>();
        // the set of all valid words.
        // return a valid once ,even though it can be formed in more than one way

        for (int i = 0; i < board.rows(); i++)
            for (int j = 0; j < board.cols(); j++)
                searchWord(i, j, board, board.getLetter(i, j) + "", words);

        // search every node in board to find valid words
        return words;

    }

    private void searchWord(int row, int col, BoggleBoard board, String word,
                            HashSet<String> stack) {
        // search every node's  eight neighbors to find valid word

        hasPre(word, row + 1, col, board, stack);
        hasPre(word, row + 1, col + 1, board, stack);
        hasPre(word, row + 1, col - 1, board, stack);
        hasPre(word, row, col + 1, board, stack);
        hasPre(word, row, col - 1, board, stack);
        hasPre(word, row - 1, col, board, stack);
        hasPre(word, row - 1, col + 1, board, stack);
        hasPre(word, row - 1, col - 1, board, stack);

    }


    private void hasPre(String word, int row, int col, BoggleBoard board, HashSet<String> stack) {
        // to find if there is any word in dictronary has prefix as word + board.getLetter(row,col)
        // the input word use "Q" representing "QU"

        if (row >= 0 && row < board.rows() && col >= 0 && col < board.cols()) {

            String search = word + board.getLetter(row, col);
            String QuWord = search.replace("Q", "QU");

            if (scoreOf(QuWord) > 0) stack.add(QuWord);

            String s = dictionary.ceiling(QuWord);
            // Returns the least element in this set greater than or equal to the given element, or null if there is no such element.

            if (s != null && s.startsWith(QuWord))
                searchWord(row, col, board, search, stack);

        }

    }

    // Returns the score of the given word if it is in the dictionary, zero otherwise.
    // (You can assume the word contains only the uppercase letters A through Z.)
    public int scoreOf(String word) {
        // assume the input word has replace "Q" by "QU"

        if (!dictionary.contains(word)) return 0;

        int length = word.length();

        if (length < 3) return 0;
        if (length < 5) return 1;
        if (length == 5) return 2;
        if (length == 6) return 3;
        if (length == 7) return 5;
        return 11;

    }

    public static void main(String[] args) {
        In in = new In(args[0]);
        String[] dictionary = in.readAllStrings();
        BoggleSolver solver = new BoggleSolver(dictionary);
        BoggleBoard board = new BoggleBoard(args[1]);
        int score = 0;
        for (String word : solver.getAllValidWords(board)) {
            StdOut.println(word);
            score += solver.scoreOf(word);
        }
        StdOut.println("Score = " + score);
    }
}
