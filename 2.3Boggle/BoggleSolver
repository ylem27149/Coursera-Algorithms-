/* *****************************************************************************
 *  Name:
 *  Date:
 *  Description:
 *  startsWith 返回 true 并不代表对象字符串以整个参数字符串开头，是参数字符串的一部分似乎就会返回true了。
 *  substring endInx 参数理解错误
 *  写了copy boolean数组，但是在函数内修改的时候还是写在原数组里，忘了修改了。
 **************************************************************************** */

import edu.princeton.cs.algs4.In;
import edu.princeton.cs.algs4.StdOut;

import java.util.Collections;
import java.util.HashSet;
import java.util.TreeSet;

public class BoggleSolver {
    private TreeSet<String> dictionary;

    // Initializes the data structure using the given array of strings as the dictionary.
    // (You can assume each word in the dictionary contains only the uppercase letters A through Z.)
    public BoggleSolver(String[] dictionary) {

        if (dictionary == null) throw new IllegalArgumentException();

        this.dictionary = new TreeSet<String>();
        // for (String s : dictionary)
        //     dic.add(s);
        Collections.addAll(this.dictionary, dictionary);

    }

    // Returns the set of all valid words in the given Boggle board, as an Iterable.
    public Iterable<String> getAllValidWords(BoggleBoard board) {

        if (board == null) throw new IllegalArgumentException();

        HashSet<String> words = new HashSet<String>();

        // the set of all valid words.
        // return a valid once ,even though it can be formed in more than one way

        for (int i = 0; i < board.rows(); i++)
            for (int j = 0; j < board.cols(); j++) {
                boolean[][] marked = new boolean[board.rows()][board.cols()];
                marked[i][j] = true;
                searchWord(i, j, board, board.getLetter(i, j) + "", words, marked);
            }

        // search every node in board to find valid words
        return words;

    }

    private void searchWord(int row, int col, BoggleBoard board, String word,
                            HashSet<String> stack, boolean[][] marked) {
        // search every node's  eight neighbors to find valid word

        hasPre(word, row + 1, col, board, stack, marked);
        hasPre(word, row + 1, col + 1, board, stack, marked);
        hasPre(word, row + 1, col - 1, board, stack, marked);
        hasPre(word, row, col + 1, board, stack, marked);
        hasPre(word, row, col - 1, board, stack, marked);
        hasPre(word, row - 1, col, board, stack, marked);
        hasPre(word, row - 1, col + 1, board, stack, marked);
        hasPre(word, row - 1, col - 1, board, stack, marked);

    }


    private void hasPre(String word, int row, int col, BoggleBoard board, HashSet<String> stack,
                        boolean[][] marked) {
        // to find if there is any word in dictronary has prefix as word + board.getLetter(row,col)
        // the input word use "Q" representing "QU"
        if (row >= 0 && row < board.rows() && col >= 0 && col < board.cols() && !marked[row][col]) {

            boolean[][] copy = new boolean[board.rows()][board.cols()];

            for (int i = 0; i < board.rows(); i++)
                for (int j = 0; j < board.cols(); j++)
                    copy[i][j] = marked[i][j];

            String search = word + board.getLetter(row, col);
            String QuWord = search.replace("Q", "QU");

            String ceil = dictionary.ceiling(QuWord);
            // Returns the least element in this set greater than or equal to the given element, or null if there is no such element.
            if (ceil != null && ceil.length() >= QuWord.length()) {

                String s = ceil.substring(0, QuWord.length());

                if (s.compareTo(QuWord) == 0) {
                    // if there exist word in the dictionary use QuWord as predix, continue to search its neighbors
                    copy[row][col] = true;
                    if (scoreOf(QuWord) > 0) stack.add(QuWord);

                    searchWord(row, col, board, search, stack, copy);

                }

            }

        }
    }

    // Returns the score of the given word if it is in the dictionary, zero otherwise.
    // (You can assume the word contains only the uppercase letters A through Z.)
    public int scoreOf(String word) {
        // assume the input word has replace "Q" by "QU"

        if (!dictionary.contains(word)) return 0;

        int length = word.length();

        if (length < 3) return 0;
        if (length < 5) return 1;
        if (length == 5) return 2;
        if (length == 6) return 3;
        if (length == 7) return 5;
        return 11;

    }

    public static void main(String[] args) {
        In in = new In(args[0]);
        String[] dictionary = in.readAllStrings();
        BoggleSolver solver = new BoggleSolver(dictionary);
        BoggleBoard board = new BoggleBoard(args[1]);
        int score = 0;
        for (String word : solver.getAllValidWords(board)) {
            StdOut.println(word);
            score += solver.scoreOf(word);
        }
        StdOut.println("Score = " + score);
    }
}
