/* *****************************************************************************
 *  Name:
 *  Date:
 *  Description:
 *  把marked改成实例变量。并且不再在hasPre中创建marked的副本，通过在SearchWord结尾把当前节点false来起到相同功能。
 *  取消了对String.replace的调用，通过检测每个节点是否为Q来实现相同的功能
 **************************************************************************** */

import edu.princeton.cs.algs4.In;
import edu.princeton.cs.algs4.StdOut;

import java.util.HashSet;

public class BoggleSolver {
    // private TreeSet<String> dictionary;
    private Trie dictionary;
    private boolean[][] marked;


    // Initializes the data structure using the given array of strings as the dictionary.
    // (You can assume each word in the dictionary contains only the uppercase letters A through Z.)
    public BoggleSolver(String[] dictionary) {

        if (dictionary == null) throw new IllegalArgumentException();

        this.dictionary = new Trie();
        for (String s : dictionary)
            this.dictionary.add(s);


    }

    // Returns the set of all valid words in the given Boggle board, as an Iterable.
    public Iterable<String> getAllValidWords(BoggleBoard board) {

        if (board == null) throw new IllegalArgumentException();

        HashSet<String> words = new HashSet<String>();


        // the set of all valid words.
        // return a valid once ,even though it can be formed in more than one way

        for (int i = 0; i < board.rows(); i++)
            for (int j = 0; j < board.cols(); j++) {
                marked = new boolean[board.rows()][board.cols()];
                marked[i][j] = true;
                if (board.getLetter(i, j) == 'Q')
                    searchWord(i, j, board, "QU", words);
                else
                    searchWord(i, j, board, board.getLetter(i, j) + "", words);
            }

        // search every node in board to find valid words
        return words;

    }

    private void searchWord(int row, int col, BoggleBoard board, String word,
                            HashSet<String> hashset) {
        // search every node's  eight neighbors to find valid word

        
        for (int i = -1; i < 2; i++)
            for (int j = -1; j < 2; j++) {
                hasPre(word, row + i, col + j, board, hashset);
            }
        marked[row][col] = false;

        /**
         hasPre(word, row + 1, col, board, stack, marked);
         hasPre(word, row + 1, col + 1, board, stack, marked);
         hasPre(word, row + 1, col - 1, board, stack, marked);
         hasPre(word, row, col + 1, board, stack, marked);
         hasPre(word, row, col - 1, board, stack, marked);
         hasPre(word, row - 1, col, board, stack, marked);
         hasPre(word, row - 1, col + 1, board, stack, marked);
         hasPre(word, row - 1, col - 1, board, stack, marked);
         **/
    }


    private void hasPre(String word, int row, int col, BoggleBoard board, HashSet<String> hashset
    ) {
        String search;
        // to find if there is any word in dictronary has prefix as word + board.getLetter(row,col)
        // the input word use "Q" representing "QU"
        if (row >= 0 && row < board.rows() && col >= 0 && col < board.cols() && !marked[row][col]) {

            /**
             boolean[][] copy = new boolean[row][col];

             for (int i = 0; i < board.rows(); i++)
             for (int j = 0; j < col; j++)
             marked[i][j] = marked[i][j];
             **/
            if (board.getLetter(row, col) == 'Q')
                search = word + "QU";
            else search = word + board.getLetter(row, col);

            if (dictionary.hasPrefix(search)) {
                marked[row][col] = true;
                if (scoreOf(search) > 0) hashset.add(search);
                searchWord(row, col, board, search, hashset);
            }


            /**
             String ceil = dictionary.ceiling(search);
             // Returns the least element in this set greater than or equal to the given element, or null if there is no such element.
             if (ceil != null && ceil.length() >= QuWord.length()) {

             String s = ceil.substring(0, QuWord.length());

             if (s.compareTo(QuWord) == 0) {
             // if there exist word in the dictionary use QuWord as predix, continue to search its neighbors
             copy[row][col] = true;
             if (scoreOf(QuWord) > 0) stack.add(QuWord);

             searchWord(row, col, board, search, stack, copy);

             }

             }
             **/

        }
    }

    // Returns the score of the given word if it is in the dictionary, zero otherwise.
    // (You can assume the word contains only the uppercase letters A through Z.)
    public int scoreOf(String word) {
        // assume the input word has replace "Q" by "QU"

        if (!dictionary.contains(word)) return 0;

        int length = word.length();

        if (length < 3) return 0;
        if (length < 5) return 1;
        if (length == 5) return 2;
        if (length == 6) return 3;
        if (length == 7) return 5;
        return 11;

    }

    public static void main(String[] args) {
        In in = new In(args[0]);
        String[] dictionary = in.readAllStrings();
        BoggleSolver solver = new BoggleSolver(dictionary);
        BoggleBoard board = new BoggleBoard(args[1]);
        int score = 0;
        for (String word : solver.getAllValidWords(board)) {
            StdOut.println(word);
            score += solver.scoreOf(word);
        }
        StdOut.println("Score = " + score);
    }
}
