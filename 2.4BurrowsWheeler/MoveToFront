/* *****************************************************************************
 *  Name:
 *  Date:
 *  Description:
 *  根据编译器的提示，修改ARRAYLIST为ARRAY(但是还是慢到我自己根本运行不动，只能靠上传到系统里debug……）
 *  在测试里会多输出很多零，查了份参考答案，发现是输出位数的问题。我的序列总共256个数，8bit，但是缺省的BinaryStdOut.write(int)是输出32bit
 *  参考代码 http://www.shicheng0829.cn/index.php/2018/11/28/%e3%80%90algorithms-part-ii%e3%80%91week5-burrows-wheeler/
 *  BinaryStdOut源码 https://introcs.cs.princeton.edu/java/stdlib/BinaryStdOut.java.html
 **************************************************************************** */

import edu.princeton.cs.algs4.BinaryStdIn;
import edu.princeton.cs.algs4.BinaryStdOut;

public class MoveToFront {
    private static final int R = 256;   // the sequence has 256 extended ASCII characters
    private static final int L = 8; // 256 = 8 bit

    // apply move-to-front encoding, reading from standard input and writing to standard output
    public static void encode() {
        char[] seq = new char[R];
        // the sequence of the 256 extended ASCII characters
        // Using the 'ArrayList' data type in this program may lead to poor performance. Consider using an array instead.
        char inputC;        // input char

        for (int i = 0; i < R; i++)
            seq[i] = (char) i;
        // (char) 和‘’的不同点


        while (!BinaryStdIn.isEmpty()) {
            inputC = BinaryStdIn.readChar();        // Initialize input char
            for (int i = 0; i < R; i++)
                if (seq[i] == inputC) {
                    BinaryStdOut.write(i, L);      // output the index
                    // rewrite seq[],move to front
                    for (int j = i; j > 0; j--)
                        seq[j] = seq[j - 1];
                    seq[0] = inputC;
                    break;
                }

        }

        BinaryStdOut.close();
    }

    // apply move-to-front decoding, reading from standard input and writing to standard output
    public static void decode() {
        char[] seq = new char[R]; // the sequence of the 256 extended ASCII characters
        int input;  // the index in the sequence

        //Initialize seq
        for (int i = 0; i < R; i++)
            seq[i] = (char) i;

        while (!BinaryStdIn.isEmpty()) {
            input = (int) BinaryStdIn.readChar();        // Initialize input
            BinaryStdOut.write(seq[input],L); // output the char
            //move to front
            char c = seq[input];
            for (int i = input; i > 0; i--)
                seq[i] = seq[i - 1];
            seq[0] = c;
        }

        BinaryStdOut.close();
    }

    // if args[0] is "-", apply move-to-front encoding
    // if args[0] is "+", apply move-to-front decoding
    public static void main(String[] args) {
        if (args[0].equals("-")) encode();
        if (args[0].equals("+")) decode();
    }
}
