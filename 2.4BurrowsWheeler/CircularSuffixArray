/* *****************************************************************************
 *  Name:
 *  Date:
 *  Description: 
 *  修正了超出范围的字符查找逻辑
 *  增加相同suffix情况的处理
 **************************************************************************** */

import edu.princeton.cs.algs4.StdIn;
import edu.princeton.cs.algs4.StdOut;

import java.util.ArrayList;
import java.util.Arrays;

public class CircularSuffixArray {

    private int length;
    private char[] firstChar;       // the first character in the original circular suffix
    private int[] index;
    // the index of the original suffix that appears ith in the sorted array


    // circular suffix array of s
    public CircularSuffixArray(String s) {
        if (s == null) throw new IllegalArgumentException();
        length = s.length();
        index = new int[s.length()];
        firstChar = s.toCharArray();
        ArrayList<Integer> firstCharIndex = new ArrayList<Integer>();
        for (int i = 0; i < s.length(); i++)
            firstCharIndex.add(i);
        compareChar(firstCharIndex, 0, 0);


    }

    private void compareChar(ArrayList<Integer> firstCharIndex, int m, int s)
    // compare some suffixes which has same prefix
    // this function is used to compare mth character in those circular suffixes
    //  firstCharIndex is the index in original circular suffix.Because the number of suffixes to be compared can be different, so choose the datatype ArrayList
    // s is the first suffx's index in sorted array, which was compared because of the same prefix
    {
        ArrayList<Integer> next
                = new ArrayList<Integer>();     // next firstCharIndex.that is, the suffixes which has same mth character
        char[] sort = new char[firstCharIndex.size()];      // mth character in each suffixes

        // the nontrivial circular case, which has some same suffixes
        if (m == length) {
            int i = 0;
            for (int f : firstCharIndex) {
                index[s + i] = f;
                i++;
                // 其实是一样的序列，不过这里的index[]的排序规则是每个排名有且仅有一人，所以就按f里的前后顺序排一下吧……
            }
            return;
        }

        // trivial case
        for (int i = 0; i < sort.length; i++)
            if (firstCharIndex.get(i) + m
                    < length)     // firstCharIndex.get(i) + m  is the char's index in the original string
                sort[i] = firstChar[firstCharIndex.get(i) + m];
            else
                sort[i] = firstChar[firstCharIndex.get(i) + m - length];   // if f+m out of boundary


        Arrays.sort(sort);

        for (int i = 0; i < sort.length; i++) {  // search all sorted characters. sort[i]
            if (i == 0 || sort[i] != sort[i
                    - 1])       // if sort[i] is a new character(different form its left neighbor)
                for (int f : firstCharIndex) {      // find sort[i] corresponding suffix index 'f'
                    if ((f + m < length && sort[i] == firstChar[f + m]) || (f + m >= length
                            && sort[i] == firstChar[f + m - length])) {
                        if (i < sort.length - 1 && sort[i] == sort[i
                                + 1])      // line 55 premise sort[i] is a new element, so just have to check if it has a same right neighbor
                            // if there are same characters in sortedChar, compare the next charater in those suffix
                            next.add(f);
                        else
                            index[i + s] = f;
                    }
                }
            if (next.size() != 0) {
                compareChar(next, m + 1, i + s);
                next = new ArrayList<Integer>();
            }

        }

    }


    // length of s
    public int length() {
        return length;
    }

    // returns index of ith sorted suffix
    public int index(int i) {
        if (i < 0 || i >= length)
            throw new IllegalArgumentException();
        return index[i];
    }

    // unit testing (required)
    public static void main(String[] args) {
        CircularSuffixArray test = new CircularSuffixArray(StdIn.readString());
        for (int i = 0; i < test.length(); i++)
            StdOut.println("index" + i + " = " + test.index(i));

    }

}
