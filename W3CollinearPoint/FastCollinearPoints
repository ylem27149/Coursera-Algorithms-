/* *****************************************************************************
 *  Name:
 *  Date:
 *  Description:增加输入输出数组创建副本的代码
 **************************************************************************** */

import edu.princeton.cs.algs4.In;
import edu.princeton.cs.algs4.StdDraw;
import edu.princeton.cs.algs4.StdOut;

import java.util.Arrays;

public class FastCollinearPoints {
    private int lineNumber; // the number of line segments
    private LineSegment[] lines;
    // line segments containing 4 or more points。

    public FastCollinearPoints(
            Point[] points)     // finds all line segments containing 4 or more points
    {
        // Corner cases
        if (points == null)
            throw new IllegalArgumentException("the argument to the constructor is null");

        if (points[0] == null)
            throw new IllegalArgumentException("there is null point in the array ");

        lines = new LineSegment[2];

        Point[] pointscopy = points.clone();
        Arrays.sort(pointscopy);

        // ith point is invoking point, the points before i are handled , and the points after i are those who may colliner to ith point
        // i is between 0 and points.length-4,when there are four or more points int the subarray,
        for (int i = 0; i < pointscopy.length - 3; i++) {
            // Arrays.sort(a, lo, hi) sorts the subarray from a[lo] to a[hi-1]
            // use a Comparator as the fourth argument to sort according to the slope that each point make with ith point in the array.
            Arrays.sort(pointscopy, i + 1, pointscopy.length, pointscopy[i].slopeOrder());
            fourColliner(pointscopy, i);
        }
    }

    private void fourColliner(Point[] slopeOrdered,
                              int start)   // 传入一个以start为参考点，按各点与start所成的梯度排序的点数组
    {
        final Point START = slopeOrdered[start];
        for (int i = start + 1; i < slopeOrdered.length - 3; i++) {
            Point o1 = slopeOrdered[i];
            Point o2 = slopeOrdered[i + 1];
            Point o3 = slopeOrdered[i + 2];

            // test if there are repeated points, three points as a group.
            // For the ordered array, the point same as the start will be the first group, which has a Double.NEGATIVE_INFINITY;
            // So if o1 != start, the rest points can't be equal to start
            if (START.compareTo(o1) == 0 || o1.compareTo(o2) == 0 || o2.compareTo(o3) == 0
                    || o1.compareTo(o3) == 0)
                throw new IllegalArgumentException("the array contains a repeated point");

            // find three points which have the same slope with start point
            // 如果考虑有超过四个点，这部分也要变
            if (START.slopeTo(o1) == START.slopeTo(o2) && START.slopeTo(o2) == START.slopeTo(o3)) {

                Point[] colliner = { START, o1, o2, o3 };
                Arrays.sort(colliner);
                lines[lineNumber++] = new LineSegment(colliner[0], colliner[3]);
                if (lineNumber == lines.length) resize(2 * lines.length);
                i = i + 2;
            }
        }

    }

    // The method segments() should include each maximal line segment containing 4 (or more) points exactly once.
    // For example, if 5 points appear on a line segment in the order p→q→r→s→t,
    // then do not include the subsegments p→s or q→t.


    public int numberOfSegments()        // the number of line segments
    {
        return lineNumber;
    }

    public LineSegment[] segments()                // the line segments
    {
        return lines.clone();
    }

    private void resize(int max) {
        LineSegment[] temp = new LineSegment[max];
        for (int i = 0; i < lineNumber; i++)
            temp[i] = lines[i];
        lines = temp;
    }

    public static void main(String[] args) {

        // read the n points from a file
        In in = new In(args[0]);
        int n = in.readInt();
        Point[] points = new Point[n];
        for (int i = 0; i < n; i++) {
            int x = in.readInt();
            int y = in.readInt();
            points[i] = new Point(x, y);
        }

        // draw the points
        StdDraw.enableDoubleBuffering();
        StdDraw.setXscale(0, 32768);
        StdDraw.setYscale(0, 32768);
        for (Point p : points) {
            p.draw();
        }
        StdDraw.show();

        // print and draw the line segments
        FastCollinearPoints collinear = new FastCollinearPoints(points);
        for (LineSegment segment : collinear.segments()) {
            StdOut.println(segment);
            segment.draw();
        }
        StdDraw.show();
    }
}

