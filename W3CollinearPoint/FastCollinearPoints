/* *****************************************************************************
 *  Name:
 *  Date:
 *  Description:
 *  调整判断共线点时边界检测的逻辑，先加再判断。如果先判断再加，当最后一个点是共线点时，last所指向的变成共线点，在下面的坐标计算中会有问题
 *  重写了输入的合法性检测部分
 **************************************************************************** */

import edu.princeton.cs.algs4.In;
import edu.princeton.cs.algs4.StdDraw;
import edu.princeton.cs.algs4.StdOut;

import java.util.Arrays;

public class FastCollinearPoints {
    private int numOfSeg;       // 有四个点的线段条数
    private LineSegment[] lines;    // 有四个点的线段集合


    public FastCollinearPoints(
            Point[] points)     // finds all line segments containing 4 or more points
    {
        numOfSeg = 0;
        lines = new LineSegment[2];

        cornerTest(points);       // 输入的边界测试

        Point[] sortedPoints = points.clone();
        Arrays.sort(sortedPoints);        // sortedPoints按点的大小从小到大排序


        for (int i = 0; i < sortedPoints.length; i++)
            colliearFinder(sortedPoints, sortedPoints[i]);
        // 每个点从小到大，一个一个作为计算斜率排序的固定端点，寻找四点共线的所有可能
        // 每次排序时，并不去除已经排过的点。所以可以直接扫到结尾
        // 因为没有排除已经用过的端点，所以不会有线段子集出现。
        // 只有当固定端点为一组共线点中的最小点时，这个线段才会输出，这样就保证了不会重复输出同一条线。
        // 不过这样感觉性能会受点影响，因为计算了所有共线点的全排列。
        // 因为每次都会用按点大小排序的母本进行重新排序，如果Arrays.sort当参数是对象时是稳定的，输出时，线段最大点肯定是最后一个等斜率点。

    }

    private void colliearFinder(Point[] points, Point origin) {
        // 以Origin点为斜率计算的端点，将数组排序，找出其中所有共线点

        Point[] slopeSoredPoints = points.clone();
        Arrays.sort(slopeSoredPoints, origin.slopeOrder());     // 按斜率排序

        double slope;
        int last = 1;
        int collinearNum = 2;

        while (last < slopeSoredPoints.length - 1) {

            // 初始化斜率，寻找共线点
            slope = origin.slopeTo(slopeSoredPoints[last]);
            collinearNum = 2;
            last++;


            while (slope == origin.slopeTo(slopeSoredPoints[last])) {
                collinearNum++;
                last++;
                if (last > slopeSoredPoints.length - 1) break;
            }
            // 退出循环的时候，last所指向的，是第一个不同斜率的点

            if (collinearNum >= 4)       // 如果端点是共线点中的最小点，加入lineSegment。
            {
                Point[] copy = new Point[collinearNum];
                copy[0] = origin;
                for (int i = 1; i < collinearNum; i++)
                    copy[i] = slopeSoredPoints[last - collinearNum
                            + i];
               
                Arrays.sort(copy);
                // 把共线点从小到大排序

                if (copy[0].compareTo(origin) == 0) {
                    lines[numOfSeg] = new LineSegment(origin, slopeSoredPoints[last - 1]);
                    numOfSeg++;
                    if (numOfSeg == lines.length) resize(2 * lines.length);
                }
            }

        }


    }

    private void resize(int max) {
    
    // 调整lines数组大小
    
        LineSegment[] temp = new LineSegment[max];
        for (int i = 0; i < numOfSeg; i++)
            temp[i] = lines[i];
        lines = temp;
    }

    // Corner cases. Throw a java.lang.IllegalArgumentException if the argument to the constructor is null,
    // if any point in the array is null, or if the argument to the constructor contains a repeated point.
    private void cornerTest(Point[] points) {

        // 从BruteCollinerPoint复制的

        if (points == null)
            throw new IllegalArgumentException();

        for (Point p : points)
            if (p == null) throw new IllegalArgumentException();
        // 查找点集中有没有Null

        Point[] sortedPoints = points.clone();
        Arrays.sort(sortedPoints);  // 把数组按大小排列，方便接下来找有没有重复元素

        int N = points.length;

        for (int i = 0; i < N - 1; i++)
            if (sortedPoints[i].compareTo(sortedPoints[i + 1]) == 0)
                throw new IllegalArgumentException();

        // 看看点集中有没有重复点
    }
    // How do I sort a subarray in Java? Arrays.sort(a, lo, hi) sorts the subarray from a[lo] to a[hi-1] according to the natural order of a[].
    // You can use a Comparator as the fourth argument to sort according to an alternate order.

    public int numberOfSegments()        // the number of line segments
    {
        return numOfSeg;
    }

    public LineSegment[] segments()                // the line segments
    {
        LineSegment[] lineSegment = new LineSegment[numOfSeg];
        for (int i = 0; i < numOfSeg; i++)
            lineSegment[i] = lines[i];
        return lineSegment;
    }

    public static void main(String[] args) {
        // read the n points from a file
        In in = new In(args[0]);
        int n = in.readInt();
        Point[] points = new Point[n];
        for (int i = 0; i < n; i++) {
            int x = in.readInt();
            int y = in.readInt();
            points[i] = new Point(x, y);
        }

        // draw the points
        StdDraw.enableDoubleBuffering();
        StdDraw.setXscale(0, 32768);
        StdDraw.setYscale(0, 32768);
        for (Point p : points) {
            p.draw();
        }
        StdDraw.show();

        // print and draw the line segments
        FastCollinearPoints collinear = new FastCollinearPoints(points);
        for (LineSegment segment : collinear.segments()) {
            StdOut.println(segment);
            segment.draw();
        }

        StdDraw.show();

    }
}

