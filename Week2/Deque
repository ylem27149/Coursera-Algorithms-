/* *****************************************************************************
 *  Name:
 *  Date:
 *  Description:
 *  参考https://algs4.cs.princeton.edu/13stacks/Queue.java.html
 *  修正了Iterator的next判断，把currrnt.next == null 改成currrnt == null
 *  删除操作应该删掉一边指针
 *  补全了构造函数
 *  在两个Add中增加了if(N==1)的分支,并且把双向指针都Null
 *  在Node后面加上<Item>
 **************************************************************************** */

import java.util.Iterator;
import java.util.NoSuchElementException;

public class Deque<Item> implements Iterable<Item> {
    private Node<Item> first; // the front element in the queue
    private Node<Item> last; // the end element in the queue
    private int N; //  the number of elements in the Deque

    private static class Node<Item> { // 定义了结点的嵌套类
        private Item item;
        private Node<Item> next;
        private Node<Item> front;     // 因为会从后面往前删除，加了一个反向的指针以便更新last节点
    }


    public Deque()                           // construct an empty deque
    {
        first = null;
        last = null;
        N = 0;
    }

    public boolean isEmpty()                 // is the deque empty?
    {
        return first == null;
    }

    public int size()                        // return the number of items on the deque
    {
        return N;
    }

    public void addFirst(Item item)          // add the item to the front
    {
        if (item == null) {
            throw new IllegalArgumentException("addFirst has a null input.");
        }
        if (N == 0) {
            first = new Node<Item>();       // 构造函数里已经初始化了，这里还要再new一下吗？其实我觉得不用。。
            first.item = item;
            first.front = null;
            first.next = null;
            last = first;       //这里应该不是，last会一直指向first吧。而是指向了旧的first所对应的对象？要不然oldfirst也会一直指向first了
            N++;
        }
        else {
            Node<Item> oldfirst = first;
            first = new Node<Item>();
            first.front = null;
            first.item = item;
            first.next = oldfirst;
            oldfirst.front = first;
            N++;

        }
    }

    public void addLast(Item item)           // add the item to the end
    {
        if (item == null) {
            throw new IllegalArgumentException("addLast has a null input.");
        }
        if (N == 0) {
            last = new Node<Item>();
            last.item = item;
            last.next = null;
            last.front = null;
            first = last;
            N++;
        }
        else {
            Node<Item> oldlast = last;
            last = new Node<Item>();
            last.next = null;
            last.item = item;
            last.front = oldlast;
            oldlast.next = last;
            N++;
        }
    }

    public Item removeFirst()                // remove and return the item from the front
    {
        if (N == 0)
            throw new NoSuchElementException("The queue is empty.");

        Item item = first.item;
        if (N == 1) {
            first = null;
            last = null;
        }
        else {
            first = first.next;
            first.front = null;     //因为是双向指针，要删掉一边的连接才能从链表中删掉oldfirst
        }
        N--;
        return item;

    }

    public Item removeLast()                 // remove and return the item from the end
    {
        if (N == 0)
            throw new NoSuchElementException("The queue is empty.");
        Item item = last.item;
        if (N == 1) {
            first = null;
            last = null;
        }
        else {
            last = last.front;
            last.next = null;       // remove the old last from the link list
        }

        N--;
        return item;
    }

    public Iterator<Item> iterator()         // return an iterator over items in order from front to end
    {
        return new FrontToEndIterator();
    }
    //在类中添加一个方法 iterator() 并返回一个迭代器

    private class FrontToEndIterator implements Iterator<Item> {
        private Node<Item> current = first;

        public boolean hasNext() {
            return current != null;
        }

        public void remove() {
            throw new UnsupportedOperationException("Don't call remove() method in the iterator");
        }

        public Item next() {
            if (!hasNext())
                throw new NoSuchElementException(
                        "there are no more items to return in iterator next()");
            Item item = current.item;
            current = current.next;
            return item;
        }

    }
}
